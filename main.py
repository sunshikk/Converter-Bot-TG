import logging
import asyncio
import os
import traceback
import tempfile

from aiogram import Bot, Dispatcher, Router, types
from aiogram.filters import CommandStart, StateFilter
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaVideo
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from moviepy import VideoFileClip

class Form(StatesGroup):
    waiting_mp4_file = State()
    waiting_mp4wav_file = State()
    waiting_mp4flac_file = State()
    waiting_mp4opus_file = State()
    waiting_mp4ogg_file = State()
    waiting_mp4mpeg_file = State()
    waiting_mp4avi_file = State()
    waiting_mp4mov_file = State()
    waiting_avi_file = State()
    waiting_mpeg_file = State()
    waiting_mov_file = State()

choice = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="üé¨ MP4 –≤ MP3", callback_data="mp4to3"),
        InlineKeyboardButton(text="üé¨ MP4 –≤ WAV", callback_data="mp4towav"),
        InlineKeyboardButton(text="üé¨ MP4 –≤ FLAC", callback_data="mp4toflac"),
    ],
    [
        InlineKeyboardButton(text="üé¨ MP4 –≤ OPUS", callback_data="mp4toopus"),
        InlineKeyboardButton(text="üé¨ MP4 –≤ OGG", callback_data="mp4toogg")
    ],
    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="cancel")]
])

choicevid = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="üé¨ MP4 –≤ MPEG", callback_data="mp4tompeg"),
        InlineKeyboardButton(text="üé¨ MP4 –≤ AVI", callback_data="mp4toavi"),
        InlineKeyboardButton(text="üé¨ MP4 –≤ MOV", callback_data="mp4tomov")
    ],
    [
        InlineKeyboardButton(text="üé¨ AVI –≤ MP4", callback_data="avitomp4"),
        InlineKeyboardButton(text="üé¨ MPEG –≤ MP4", callback_data="mpegtomp4"),
        InlineKeyboardButton(text="üé¨ MOV –≤ MP4", callback_data="movtomp4")
    ],
    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="cancel")]
])

choicestart = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="1Ô∏è‚É£ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –≤ –∞—É–¥–∏–æ", callback_data="vitoaudio")],
    [InlineKeyboardButton(text="2Ô∏è‚É£ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ –≤ –≤–∏–¥–µ–æ", callback_data="vitovideo")],
])

cancel = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="cancel")]
])

MAX_FILE_SIZE = 20 * 1024 * 1024

logging.basicConfig(level=logging.INFO)

bot = Bot(token='7844735010:AAHZuVDSxU88dnxCpjs73KkTVCGuboSoeyE')
dp = Dispatcher()
router = Router()

@router.message(StateFilter(None), CommandStart())
async def send_welcome(message: Message):
    await message.answer("üìÑ –î–∞–Ω–Ω—ã–π –±–æ—Ç –º–æ–∂–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã —Å –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞ –≤ –¥—Ä—É–≥–æ–µ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –í–∞—Å.", reply_markup=choicestart)

@router.callback_query() 
async def process_callback(callback_query: CallbackQuery, state: FSMContext): 
    data = callback_query.data

    if data == "vitoaudio":
        await callback_query.bot.edit_message_text(
            text="‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤: <b>–í–∏–¥–µ–æ –≤ –∞—É–¥–∏–æ</b>\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å",
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            parse_mode="HTML",
            reply_markup=choice
        )

    if data == "vitovideo":
        await callback_query.bot.edit_message_text(
            text="‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤: <b>–í–∏–¥–µ–æ –≤ –≤–∏–¥–µ–æ</b>\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å",
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            parse_mode="HTML",
            reply_markup=choicevid
        )

    if data == "mp4to3":
        await state.set_state(Form.waiting_mp4_file)
        await callback_query.bot.edit_message_text(
            text="‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç–∏–ø –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤: <b>MP4 –≤ MP3</b>\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .mp4 –±–æ—Ç—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.",
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            parse_mode="HTML",
            reply_markup=cancel
        )

    if data == "mp4towav":
        await state.set_state(Form.waiting_mp4wav_file)
        await callback_query.bot.edit_message_text(
            text="‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç–∏–ø –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤: <b>MP4 –≤ WAV</b>\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .mp4 –±–æ—Ç—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.",
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            parse_mode="HTML",
            reply_markup=cancel
        )

    if data == "mp4toflac":
        await state.set_state(Form.waiting_mp4flac_file)
        await callback_query.bot.edit_message_text(
            text="‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç–∏–ø –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤: <b>MP4 –≤ FLAC</b>\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .mp4 –±–æ—Ç—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.",
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            parse_mode="HTML",
            reply_markup=cancel
        )

    if data == "mp4toopus":
        await state.set_state(Form.waiting_mp4opus_file)
        await callback_query.bot.edit_message_text(
            text="‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç–∏–ø –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤: <b>MP4 –≤ OPUS</b>\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .mp4 –±–æ—Ç—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.",
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            parse_mode="HTML",
            reply_markup=cancel
        )

    if data == "mp4toogg":
        await state.set_state(Form.waiting_mp4ogg_file)
        await callback_query.bot.edit_message_text(
            text="‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç–∏–ø –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤: <b>MP4 –≤ OGG</b>\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .mp4 –±–æ—Ç—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.",
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            parse_mode="HTML",
            reply_markup=cancel
        )

    if data == "mp4tompeg":
        await state.set_state(Form.waiting_mp4mpeg_file)
        await callback_query.bot.edit_message_text(
            text="‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç–∏–ø –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤: <b>MP4 –≤ MPEG</b>\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .mp4 –±–æ—Ç—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.",
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            parse_mode="HTML",
            reply_markup=cancel
        )

    if data == "mp4toavi":
        await state.set_state(Form.waiting_mp4avi_file)
        await callback_query.bot.edit_message_text(
            text="‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç–∏–ø –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤: <b>MP4 –≤ AVI</b>\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .mp4 –±–æ—Ç—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.",
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            parse_mode="HTML",
            reply_markup=cancel
        )

    if data == "mp4tomov":
        await state.set_state(Form.waiting_mp4mov_file)
        await callback_query.bot.edit_message_text(
            text="‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç–∏–ø –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤: <b>MP4 –≤ MOV</b>\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .mp4 –±–æ—Ç—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.",
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            parse_mode="HTML",
            reply_markup=cancel
        )

    if data == "avitomp4":
        await state.set_state(Form.waiting_avi_file)
        await callback_query.bot.edit_message_text(
            text="‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç–∏–ø –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤: <b>AVI –≤ MP4</b>\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .avi –±–æ—Ç—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.",
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            parse_mode="HTML",
            reply_markup=cancel
        )

    if data == "mpegtomp4":
        await state.set_state(Form.waiting_mpeg_file)
        await callback_query.bot.edit_message_text(
            text="‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç–∏–ø –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤: <b>MPEG –≤ MP4</b>\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .mpeg –±–æ—Ç—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.",
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            parse_mode="HTML",
            reply_markup=cancel
        )

    if data == "movtomp4":
        await state.set_state(Form.waiting_mov_file)
        await callback_query.bot.edit_message_text(
            text="‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç–∏–ø –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤: <b>MOV –≤ MP4</b>\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .mov –±–æ—Ç—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.",
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            parse_mode="HTML",
            reply_markup=cancel
        )

    if data == "cancel":
        await state.clear()
        await callback_query.bot.edit_message_text(
            text="üìÑ –î–∞–Ω–Ω—ã–π –±–æ—Ç –º–æ–∂–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã —Å –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞ –≤ –¥—Ä—É–≥–æ–µ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –í–∞—Å.",
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            parse_mode=None,
            reply_markup=choicestart
        )


@router.message(Form.waiting_mp4_file)
async def process_video(message: Message, state: FSMContext):
    if message.document and message.document.mime_type == "video/mp4":
        await message.reply(" –ü–æ–ª—É—á–∏–ª –≤–∏–¥–µ–æ, –Ω–∞—á–∏–Ω–∞—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é...")
        try:
            file_id = message.document.file_id
            file_info = await bot.get_file(file_id)
            file_path = file_info.file_path
            file_size = file_info.file_size

            if file_size > MAX_FILE_SIZE:
                await message.reply("‚ùå –û—à–∏–±–∫–∞: —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 20 –ú–ë. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.")
                return

            video_file_bytes = await bot.download_file(file_path)

            with tempfile.NamedTemporaryFile(suffix=".mp4", delete=False) as temp_file:
                temp_file.write(video_file_bytes.getvalue())
                temp_file_path = temp_file.name

            video = VideoFileClip(temp_file_path)
            mp3_file = "audio.mp3"
            video.audio.write_audiofile(mp3_file)
            video.close()

            chat_id = message.chat.id
            reply_message_id = message.message_id

            audio_file = types.FSInputFile("audio.mp3")

            await bot.send_audio(chat_id, audio_file, reply_to_message_id=reply_message_id)

            await message.reply("‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=cancel)

            os.remove(temp_file_path)
            os.remove("audio.mp3")
            await state.clear()

        except Exception as e:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}\n{traceback.format_exc()}")
            return
    else:
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π MP4 —Ñ–∞–π–ª.")

@router.message(Form.waiting_mp4wav_file)
async def process_video2(message: Message, state: FSMContext):
    if message.document and message.document.mime_type == "video/mp4":
        await message.reply("–ü–æ–ª—É—á–∏–ª –≤–∏–¥–µ–æ, –Ω–∞—á–∏–Ω–∞—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é...")
        try:
            file_id = message.document.file_id
            file_info = await bot.get_file(file_id)
            file_path = file_info.file_path
            file_size = file_info.file_size

            if file_size > MAX_FILE_SIZE:
                await message.reply("‚ùå –û—à–∏–±–∫–∞: —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 20 –ú–ë. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.")
                return

            video_file_bytes = await bot.download_file(file_path)

            with tempfile.NamedTemporaryFile(suffix=".mp4", delete=False) as temp_file:
                temp_file.write(video_file_bytes.getvalue())
                temp_file_path = temp_file.name

            video = VideoFileClip(temp_file_path)
            wav_file = "audio.wav"
            video.audio.write_audiofile(wav_file)
            video.close()

            chat_id = message.chat.id
            reply_message_id = message.message_id

            audio_file = types.FSInputFile(wav_file)

            await bot.send_audio(chat_id, audio_file, reply_to_message_id=reply_message_id)

            await message.reply("‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=cancel)

            os.remove(temp_file_path)
            os.remove(wav_file)
            await state.clear()

        except Exception as e:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}\n{traceback.format_exc()}")
            return
    else:
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π MP4 —Ñ–∞–π–ª.")

@router.message(Form.waiting_mp4flac_file)
async def process_video3(message: Message, state: FSMContext):
    if message.document and message.document.mime_type == "video/mp4":
        await message.reply("–ü–æ–ª—É—á–∏–ª –≤–∏–¥–µ–æ, –Ω–∞—á–∏–Ω–∞—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é...")
        try:
            file_id = message.document.file_id
            file_info = await bot.get_file(file_id)
            file_path = file_info.file_path
            file_size = file_info.file_size

            if file_size > MAX_FILE_SIZE:
                await message.reply("‚ùå –û—à–∏–±–∫–∞: —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 20 –ú–ë. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.")
                return

            video_file_bytes = await bot.download_file(file_path)

            with tempfile.NamedTemporaryFile(suffix=".mp4", delete=False) as temp_file:
                temp_file.write(video_file_bytes.getvalue())
                temp_file_path = temp_file.name

            video = VideoFileClip(temp_file_path)
            flac_file = "audio.flac"
            video.audio.write_audiofile(flac_file)
            video.close()

            chat_id = message.chat.id
            reply_message_id = message.message_id

            audio_file = types.FSInputFile(flac_file)

            await bot.send_audio(chat_id, audio_file, reply_to_message_id=reply_message_id)

            await message.reply("‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=cancel)

            os.remove(temp_file_path)
            os.remove(flac_file)
            await state.clear()

        except Exception as e:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}\n{traceback.format_exc()}")
            return
    else:
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π MP4 —Ñ–∞–π–ª.")

@router.message(Form.waiting_mp4opus_file)
async def process_video4(message: Message, state: FSMContext):
    if message.document and message.document.mime_type == "video/mp4":
        await message.reply("–ü–æ–ª—É—á–∏–ª –≤–∏–¥–µ–æ, –Ω–∞—á–∏–Ω–∞—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é...")
        try:
            file_id = message.document.file_id
            file_info = await bot.get_file(file_id)
            file_path = file_info.file_path
            file_size = file_info.file_size

            if file_size > MAX_FILE_SIZE:
                await message.reply("‚ùå –û—à–∏–±–∫–∞: —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 20 –ú–ë. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.")
                return

            video_file_bytes = await bot.download_file(file_path)

            with tempfile.NamedTemporaryFile(suffix=".mp4", delete=False) as temp_file:
                temp_file.write(video_file_bytes.getvalue())
                temp_file_path = temp_file.name

            video = VideoFileClip(temp_file_path)
            opus_file = "audio.opus"
            video.audio.write_audiofile(opus_file)
            video.close()

            chat_id = message.chat.id
            reply_message_id = message.message_id

            audio_file = types.FSInputFile(opus_file)

            await bot.send_audio(chat_id, audio_file, reply_to_message_id=reply_message_id)

            await message.reply("‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=cancel)

            os.remove(temp_file_path)
            os.remove(opus_file)
            await state.clear()

        except Exception as e:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}\n{traceback.format_exc()}")
            return
    else:
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π MP4 —Ñ–∞–π–ª.")

@router.message(Form.waiting_mp4ogg_file)
async def process_video5(message: Message, state: FSMContext):
    if message.document and message.document.mime_type == "video/mp4":
        await message.reply("–ü–æ–ª—É—á–∏–ª –≤–∏–¥–µ–æ, –Ω–∞—á–∏–Ω–∞—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é...")
        try:
            file_id = message.document.file_id
            file_info = await bot.get_file(file_id)
            file_path = file_info.file_path
            file_size = file_info.file_size

            if file_size > MAX_FILE_SIZE:
                await message.reply("‚ùå –û—à–∏–±–∫–∞: —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 20 –ú–ë. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.")
                return

            video_file_bytes = await bot.download_file(file_path)

            with tempfile.NamedTemporaryFile(suffix=".mp4", delete=False) as temp_file:
                temp_file.write(video_file_bytes.getvalue())
                temp_file_path = temp_file.name

            video = VideoFileClip(temp_file_path)
            ogg_file = "audio.ogg"
            video.audio.write_audiofile(ogg_file)
            video.close()

            chat_id = message.chat.id
            reply_message_id = message.message_id

            audio_file = types.FSInputFile(ogg_file)

            await bot.send_audio(chat_id, audio_file, reply_to_message_id=reply_message_id)

            await message.reply("‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=cancel)

            os.remove(temp_file_path)
            os.remove(ogg_file)
            await state.clear()

        except Exception as e:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}\n{traceback.format_exc()}")
            return
    else:
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π MP4 —Ñ–∞–π–ª.")

@router.message(Form.waiting_mp4mpeg_file)
async def convert_video(message: Message):
    video_file = message.document
    if not video_file or video_file.mime_type != 'video/mp4':
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ MP4.")
        return

    await message.reply("üé¨ –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ—Ñ–∞–π–ª...")

    file_path = None
    output_path = None

    try:
        file_info = await bot.get_file(video_file.file_id)

        with tempfile.NamedTemporaryFile(suffix=".mp4", delete=False) as tmp_file:
            await bot.download_file(file_info.file_path, destination=tmp_file.name)
            file_path = tmp_file.name

        await message.reply("‚è≥ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤–∏–¥–µ–æ...")

        output_path = os.path.splitext(file_path)[0] + ".mpeg"

        try:
            clip = VideoFileClip(file_path)
            clip.write_videofile(output_path, codec="mpeg4")
            clip.close()
        except Exception as e:
            error_message = f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}"
            print(error_message)
            logging.exception("–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ")
            await message.reply(error_message)
            return

        await message.reply("‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ...")

        file_size = os.path.getsize(output_path)
        max_telegram_size = 50 * 1024 * 1024

        if file_size > max_telegram_size:
            await message.reply("‚ö†Ô∏è –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø—Ä—è–º—É—é.")
        else:
            try:
                with open(output_path, 'rb') as video_file:
                    media = types.InputMediaVideo(media=types.FSInputFile(output_path, filename="video.mpeg"))

                    await bot.send_media_group(message.chat.id, [media])

                await message.reply("‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", reply_markup=cancel)

            except Exception as e:
                error_message = f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}"
                print(error_message)
                logging.exception("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ")
                await message.reply(error_message)

    finally:
        if file_path:
            try:
                os.remove(file_path)
                print(f"–§–∞–π–ª {file_path} —É–¥–∞–ª–µ–Ω.")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
                logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
        if output_path:
            try:
                os.remove(output_path)
                print(f"–§–∞–π–ª {output_path} —É–¥–∞–ª–µ–Ω.")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {output_path}: {e}")
                logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {output_path}: {e}")

@router.message(Form.waiting_mp4avi_file)
async def convert_video2(message: Message):
    video_file = message.document
    if not video_file or video_file.mime_type != 'video/mp4':
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ MP4.")
        return

    await message.reply("üé¨ –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ—Ñ–∞–π–ª...")

    file_path = None
    output_path = None

    try:
        file_info = await bot.get_file(video_file.file_id)

        with tempfile.NamedTemporaryFile(suffix=".mp4", delete=False) as tmp_file:
            await bot.download_file(file_info.file_path, destination=tmp_file.name)
            file_path = tmp_file.name

        await message.reply("‚è≥ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤–∏–¥–µ–æ...")

        output_path = os.path.splitext(file_path)[0] + ".avi"

        try:
            clip = VideoFileClip(file_path)
            clip.write_videofile(output_path, codec="libx264")
            clip.close()
        except Exception as e:
            error_message = f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}"
            print(error_message)
            logging.exception("–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ")
            await message.reply(error_message)
            return

        await message.reply("‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ...")

        file_size = os.path.getsize(output_path)
        max_telegram_size = 50 * 1024 * 1024

        if file_size > max_telegram_size:
            await message.reply("‚ö†Ô∏è –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø—Ä—è–º—É—é.")
        else:
            try:
                with open(output_path, 'rb') as video_file:
                    media = types.InputMediaVideo(media=types.FSInputFile(output_path, filename="video.avi"))

                    await bot.send_media_group(message.chat.id, [media])

                await message.reply("‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", reply_markup=cancel)

            except Exception as e:
                error_message = f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}"
                print(error_message)
                logging.exception("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ")
                await message.reply(error_message)

    finally:
        if file_path:
            try:
                os.remove(file_path)
                print(f"–§–∞–π–ª {file_path} —É–¥–∞–ª–µ–Ω.")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
                logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
        if output_path:
            try:
                os.remove(output_path)
                print(f"–§–∞–π–ª {output_path} —É–¥–∞–ª–µ–Ω.")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {output_path}: {e}")
                logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {output_path}: {e}")

@router.message(Form.waiting_mp4mov_file)
async def convert_video3(message: Message):
    video_file = message.document
    if not video_file or video_file.mime_type != 'video/mp4':
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ MP4.")
        return

    await message.reply("üé¨ –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ—Ñ–∞–π–ª...")

    file_path = None
    output_path = None

    try:
        file_info = await bot.get_file(video_file.file_id)

        with tempfile.NamedTemporaryFile(suffix=".mp4", delete=False) as tmp_file:
            await bot.download_file(file_info.file_path, destination=tmp_file.name)
            file_path = tmp_file.name

        await message.reply("‚è≥ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤–∏–¥–µ–æ...")

        output_path = os.path.splitext(file_path)[0] + ".mov"

        try:
            clip = VideoFileClip(file_path)
            clip.write_videofile(output_path, codec="libx264")
            clip.close()
        except Exception as e:
            error_message = f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}"
            print(error_message)
            logging.exception("–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ")
            await message.reply(error_message)
            return

        await message.reply("‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ...")

        file_size = os.path.getsize(output_path)
        max_telegram_size = 50 * 1024 * 1024

        if file_size > max_telegram_size:
            await message.reply("‚ö†Ô∏è –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø—Ä—è–º—É—é.")
        else:
            try:
                with open(output_path, 'rb') as video_file:
                    media = types.InputMediaVideo(media=types.FSInputFile(output_path, filename="video.mov"))

                    await bot.send_media_group(message.chat.id, [media])

                await message.reply("‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", reply_markup=cancel)

            except Exception as e:
                error_message = f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}"
                print(error_message)
                logging.exception("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ")
                await message.reply(error_message)

    finally:
        if file_path:
            try:
                os.remove(file_path)
                print(f"–§–∞–π–ª {file_path} —É–¥–∞–ª–µ–Ω.")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
                logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
        if output_path:
            try:
                os.remove(output_path)
                print(f"–§–∞–π–ª {output_path} —É–¥–∞–ª–µ–Ω.")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {output_path}: {e}")
                logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {output_path}: {e}")

@router.message(Form.waiting_avi_file)
async def convert_video4(message: Message):
    video_file = message.document
    if not video_file or video_file.mime_type != 'video/avi':
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ AVI.")
        return

    await message.reply("üé¨ –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ—Ñ–∞–π–ª...")

    file_path = None
    output_path = None

    try:
        file_info = await bot.get_file(video_file.file_id)

        with tempfile.NamedTemporaryFile(suffix=".avi", delete=False) as tmp_file:
            await bot.download_file(file_info.file_path, destination=tmp_file.name)
            file_path = tmp_file.name

        await message.reply("‚è≥ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤–∏–¥–µ–æ...")

        output_path = os.path.splitext(file_path)[0] + ".mp4"

        try:
            clip = VideoFileClip(file_path)
            clip.write_videofile(output_path, codec="libx264")
            clip.close()
        except Exception as e:
            error_message = f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}"
            print(error_message)
            logging.exception("–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ")
            await message.reply(error_message)
            return

        await message.reply("‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ...")

        file_size = os.path.getsize(output_path)
        max_telegram_size = 50 * 1024 * 1024

        if file_size > max_telegram_size:
            await message.reply("‚ö†Ô∏è –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø—Ä—è–º—É—é.")
        else:
            try:
                with open(output_path, 'rb') as video_file:
                    media = types.InputMediaVideo(media=types.FSInputFile(output_path, filename="video.mp4"))

                    await bot.send_media_group(message.chat.id, [media])

                await message.reply("‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", reply_markup=cancel)

            except Exception as e:
                error_message = f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}"
                print(error_message)
                logging.exception("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ")
                await message.reply(error_message)

    finally:
        if file_path:
            try:
                os.remove(file_path)
                print(f"–§–∞–π–ª {file_path} —É–¥–∞–ª–µ–Ω.")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
                logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
        if output_path:
            try:
                os.remove(output_path)
                print(f"–§–∞–π–ª {output_path} —É–¥–∞–ª–µ–Ω.")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {output_path}: {e}")
                logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {output_path}: {e}")

@router.message(Form.waiting_mpeg_file)
async def convert_video5(message: Message):
    video_file = message.document
    if not video_file or video_file.mime_type != 'video/mpeg':
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ MPEG.")
        return

    await message.reply("üé¨ –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ—Ñ–∞–π–ª...")

    file_path = None
    output_path = None

    try:
        file_info = await bot.get_file(video_file.file_id)

        with tempfile.NamedTemporaryFile(suffix=".mpeg", delete=False) as tmp_file:
            await bot.download_file(file_info.file_path, destination=tmp_file.name)
            file_path = tmp_file.name

        await message.reply("‚è≥ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤–∏–¥–µ–æ...")

        output_path = os.path.splitext(file_path)[0] + ".mp4"

        try:
            clip = VideoFileClip(file_path)
            clip.write_videofile(output_path, codec="libx264")
            clip.close()
        except Exception as e:
            error_message = f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}"
            print(error_message)
            logging.exception("–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ")
            await message.reply(error_message)
            return

        await message.reply("‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ...")

        file_size = os.path.getsize(output_path)
        max_telegram_size = 50 * 1024 * 1024

        if file_size > max_telegram_size:
            await message.reply("‚ö†Ô∏è –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø—Ä—è–º—É—é.")
        else:
            try:
                with open(output_path, 'rb') as video_file:
                    media = types.InputMediaVideo(media=types.FSInputFile(output_path, filename="video.mp4"))

                    await bot.send_media_group(message.chat.id, [media])

                await message.reply("‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", reply_markup=cancel)

            except Exception as e:
                error_message = f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}"
                print(error_message)
                logging.exception("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ")
                await message.reply(error_message)

    finally:
        if file_path:
            try:
                os.remove(file_path)
                print(f"–§–∞–π–ª {file_path} —É–¥–∞–ª–µ–Ω.")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
                logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
        if output_path:
            try:
                os.remove(output_path)
                print(f"–§–∞–π–ª {output_path} —É–¥–∞–ª–µ–Ω.")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {output_path}: {e}")
                logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {output_path}: {e}")

@router.message(Form.waiting_mov_file)
async def convert_video6(message: Message):
    video_file = message.document
    if not video_file or video_file.mime_type != 'video/mov':
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ MOV.")
        return

    await message.reply("üé¨ –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ—Ñ–∞–π–ª...")

    file_path = None
    output_path = None

    try:
        file_info = await bot.get_file(video_file.file_id)

        with tempfile.NamedTemporaryFile(suffix=".mov", delete=False) as tmp_file:
            await bot.download_file(file_info.file_path, destination=tmp_file.name)
            file_path = tmp_file.name

        await message.reply("‚è≥ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤–∏–¥–µ–æ...")

        output_path = os.path.splitext(file_path)[0] + ".mp4"

        try:
            clip = VideoFileClip(file_path)
            clip.write_videofile(output_path, codec="libx264")
            clip.close()
        except Exception as e:
            error_message = f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}"
            print(error_message)
            logging.exception("–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ")
            await message.reply(error_message)
            return

        await message.reply("‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ...")

        file_size = os.path.getsize(output_path)
        max_telegram_size = 50 * 1024 * 1024

        if file_size > max_telegram_size:
            await message.reply("‚ö†Ô∏è –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø—Ä—è–º—É—é.")
        else:
            try:
                with open(output_path, 'rb') as video_file:
                    media = types.InputMediaVideo(media=types.FSInputFile(output_path, filename="video.mp4"))

                    await bot.send_media_group(message.chat.id, [media])

                await message.reply("‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", reply_markup=cancel)

            except Exception as e:
                error_message = f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}"
                print(error_message)
                logging.exception("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ")
                await message.reply(error_message)

    finally:
        if file_path:
            try:
                os.remove(file_path)
                print(f"–§–∞–π–ª {file_path} —É–¥–∞–ª–µ–Ω.")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
                logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
        if output_path:
            try:
                os.remove(output_path)
                print(f"–§–∞–π–ª {output_path} —É–¥–∞–ª–µ–Ω.")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {output_path}: {e}")
                logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {output_path}: {e}")


async def main():
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print('–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω')
